"""Initial migration

Revision ID: initial
Revises:
Create Date: 2025-10-28 02:01:01.216848

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'initial'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('garden_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_date', sa.Date(), nullable=False),
    sa.Column('last_accessed_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_garden_plans_id'), 'garden_plans', ['id'], unique=False)
    op.create_index(op.f('ix_garden_plans_name'), 'garden_plans', ['name'], unique=False)
    op.create_table('plants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plant_name', sa.String(), nullable=False),
    sa.Column('variety_name', sa.String(), nullable=True),
    sa.Column('scientific_name', sa.String(), nullable=True),
    sa.Column('plant_family', sa.String(), nullable=True),
    sa.Column('plant_type', sa.String(), nullable=True),
    sa.Column('growth_habit', sa.String(), nullable=True),
    sa.Column('origin_heirloom_status', sa.String(), nullable=True),
    sa.Column('organic', sa.Boolean(), nullable=True),
    sa.Column('seed_company_source', sa.String(), nullable=True),
    sa.Column('year_acquired', sa.Integer(), nullable=True),
    sa.Column('seed_size', sa.String(), nullable=True),
    sa.Column('seed_longevity_storage_life', sa.String(), nullable=True),
    sa.Column('germination_temperature_min', sa.Integer(), nullable=True),
    sa.Column('germination_temperature_max', sa.Integer(), nullable=True),
    sa.Column('germination_temperature_ideal', sa.Integer(), nullable=True),
    sa.Column('germination_time_days', sa.String(), nullable=True),
    sa.Column('light_requirement_for_germination', sa.String(), nullable=True),
    sa.Column('stratification_required', sa.Boolean(), nullable=True),
    sa.Column('scarification_required', sa.Boolean(), nullable=True),
    sa.Column('sowing_depth', sa.String(), nullable=True),
    sa.Column('spacing_in_row', sa.String(), nullable=True),
    sa.Column('spacing_low', sa.Integer(), nullable=True),
    sa.Column('spacing_high', sa.Integer(), nullable=True),
    sa.Column('direct_seedable', sa.Boolean(), nullable=True),
    sa.Column('transplantable', sa.Boolean(), nullable=True),
    sa.Column('days_to_transplant_low', sa.Integer(), nullable=True),
    sa.Column('days_to_transplant_high', sa.Integer(), nullable=True),
    sa.Column('time_to_maturity', sa.String(), nullable=True),
    sa.Column('mature_plant_height', sa.String(), nullable=True),
    sa.Column('mature_plant_spread_width', sa.String(), nullable=True),
    sa.Column('sunlight_requirement', sa.String(), nullable=True),
    sa.Column('water_needs', sa.String(), nullable=True),
    sa.Column('fertilizer_needs', sa.String(), nullable=True),
    sa.Column('pest_resistance', sa.String(), nullable=True),
    sa.Column('disease_resistance', sa.String(), nullable=True),
    sa.Column('cold_hardiness_frost_tolerance', sa.String(), nullable=True),
    sa.Column('heat_tolerance', sa.String(), nullable=True),
    sa.Column('drought_tolerance', sa.String(), nullable=True),
    sa.Column('bolting_tendency', sa.String(), nullable=True),
    sa.Column('support_required', sa.String(), nullable=True),
    sa.Column('pruning_required', sa.String(), nullable=True),
    sa.Column('harvest_window_low', sa.Integer(), nullable=True),
    sa.Column('harvest_window_high', sa.Integer(), nullable=True),
    sa.Column('typical_yield', sa.String(), nullable=True),
    sa.Column('yield_units', sa.String(), nullable=True),
    sa.Column('storage_life_post_harvest', sa.String(), nullable=True),
    sa.Column('requires_pollinator', sa.Boolean(), nullable=True),
    sa.Column('notes_observations', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('weekly_yield', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plants_id'), 'plants', ['id'], unique=False)
    op.create_index(op.f('ix_plants_plant_name'), 'plants', ['plant_name'], unique=False)
    op.create_table('task_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_groups_id'), 'task_groups', ['id'], unique=False)
    op.create_table('plantings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('garden_plan_id', sa.Integer(), nullable=False),
    sa.Column('library_plant_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PLANNED', 'STARTED', 'TRANSPLANTED', 'DIRECT_SOWN', 'GROWING', 'HARVESTING', 'DONE', name='plantingstatus'), nullable=False),
    sa.Column('planting_method', sa.Enum('SEED_STARTING', 'DIRECT_SEEDING', 'SEEDLING', name='plantingmethod'), nullable=True),
    sa.Column('harvest_method', sa.Enum('SINGLE_HARVEST', 'CUT_AND_COME_AGAIN', 'STAGGERED', 'CONTINUOUS', name='harvestmethod'), nullable=True),
    sa.Column('planned_sow_date', sa.Date(), nullable=True),
    sa.Column('planned_transplant_date', sa.Date(), nullable=True),
    sa.Column('planned_harvest_start_date', sa.Date(), nullable=True),
    sa.Column('planned_harvest_end_date', sa.Date(), nullable=True),
    sa.Column('planned_second_harvest_date', sa.Date(), nullable=True),
    sa.Column('time_to_maturity_override', sa.Integer(), nullable=True),
    sa.Column('plant_name', sa.String(), nullable=False),
    sa.Column('variety_name', sa.String(), nullable=True),
    sa.Column('scientific_name', sa.String(), nullable=True),
    sa.Column('plant_family', sa.String(), nullable=True),
    sa.Column('plant_type', sa.String(), nullable=True),
    sa.Column('growth_habit', sa.String(), nullable=True),
    sa.Column('origin_heirloom_status', sa.String(), nullable=True),
    sa.Column('organic', sa.Boolean(), nullable=True),
    sa.Column('seed_company_source', sa.String(), nullable=True),
    sa.Column('year_acquired', sa.Integer(), nullable=True),
    sa.Column('seed_size', sa.String(), nullable=True),
    sa.Column('seed_longevity_storage_life', sa.String(), nullable=True),
    sa.Column('germination_temperature_min', sa.Integer(), nullable=True),
    sa.Column('germination_temperature_max', sa.Integer(), nullable=True),
    sa.Column('germination_temperature_ideal', sa.Integer(), nullable=True),
    sa.Column('germination_time_days', sa.String(), nullable=True),
    sa.Column('light_requirement_for_germination', sa.String(), nullable=True),
    sa.Column('stratification_required', sa.Boolean(), nullable=True),
    sa.Column('scarification_required', sa.Boolean(), nullable=True),
    sa.Column('sowing_depth', sa.String(), nullable=True),
    sa.Column('spacing_in_row', sa.String(), nullable=True),
    sa.Column('spacing_low', sa.Integer(), nullable=True),
    sa.Column('spacing_high', sa.Integer(), nullable=True),
    sa.Column('direct_seedable', sa.Boolean(), nullable=True),
    sa.Column('transplantable', sa.Boolean(), nullable=True),
    sa.Column('days_to_transplant_low', sa.Integer(), nullable=True),
    sa.Column('days_to_transplant_high', sa.Integer(), nullable=True),
    sa.Column('time_to_maturity', sa.String(), nullable=True),
    sa.Column('mature_plant_height', sa.String(), nullable=True),
    sa.Column('mature_plant_spread_width', sa.String(), nullable=True),
    sa.Column('sunlight_requirement', sa.String(), nullable=True),
    sa.Column('water_needs', sa.String(), nullable=True),
    sa.Column('fertilizer_needs', sa.String(), nullable=True),
    sa.Column('pest_resistance', sa.String(), nullable=True),
    sa.Column('disease_resistance', sa.String(), nullable=True),
    sa.Column('cold_hardiness_frost_tolerance', sa.String(), nullable=True),
    sa.Column('heat_tolerance', sa.String(), nullable=True),
    sa.Column('drought_tolerance', sa.String(), nullable=True),
    sa.Column('bolting_tendency', sa.String(), nullable=True),
    sa.Column('support_required', sa.String(), nullable=True),
    sa.Column('pruning_required', sa.String(), nullable=True),
    sa.Column('harvest_window_low', sa.Integer(), nullable=True),
    sa.Column('harvest_window_high', sa.Integer(), nullable=True),
    sa.Column('typical_yield', sa.String(), nullable=True),
    sa.Column('yield_units', sa.String(), nullable=True),
    sa.Column('storage_life_post_harvest', sa.String(), nullable=True),
    sa.Column('requires_pollinator', sa.Boolean(), nullable=True),
    sa.Column('notes_observations', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('weekly_yield', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['garden_plan_id'], ['garden_plans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['library_plant_id'], ['plants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plantings_id'), 'plantings', ['id'], unique=False)
    op.create_index(op.f('ix_plantings_plant_name'), 'plantings', ['plant_name'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('garden_plan_id', sa.Integer(), nullable=False),
    sa.Column('planting_id', sa.Integer(), nullable=True),
    sa.Column('task_group_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', name='taskstatus'), nullable=False),
    sa.Column('recurrence_rule', sa.String(), nullable=True),
    sa.Column('recurrence_end_date', sa.Date(), nullable=True),
    sa.Column('completed_dates', sa.JSON(), nullable=True),
    sa.Column('exdates', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['garden_plan_id'], ['garden_plans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planting_id'], ['plantings.id'], ),
    sa.ForeignKeyConstraint(['task_group_id'], ['task_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_plantings_plant_name'), table_name='plantings')
    op.drop_index(op.f('ix_plantings_id'), table_name='plantings')
    op.drop_table('plantings')
    op.drop_index(op.f('ix_task_groups_id'), table_name='task_groups')
    op.drop_table('task_groups')
    op.drop_index(op.f('ix_plants_plant_name'), table_name='plants')
    op.drop_index(op.f('ix_plants_id'), table_name='plants')
    op.drop_table('plants')
    op.drop_index(op.f('ix_garden_plans_name'), table_name='garden_plans')
    op.drop_index(op.f('ix_garden_plans_id'), table_name='garden_plans')
    op.drop_table('garden_plans')
    # ### end Alembic commands ###
